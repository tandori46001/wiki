= commandes =

== netstat Command ==
*REF: https://www.tecmint.com/install-netstat-in-linux/
<pre>
# netstat -tulpn | grep 80
</pre>

*Display Network Interface Statistics
<pre>
# netstat -ai
</pre>

*Show Network Connections
<pre>
# netstat -ant
</pre>

*Show Network Services
<pre>
# netstat -pnltu
</pre>

*Check out active routes
<pre>
netstat -r
</pre>

== curl Command ==
*test an application's endpoint or connectivity to an upstream service endpoint.
*The -I option shows the header information and the -s option silences the response body.
<pre>
$ curl -I -s myapplication:5000
</pre>

== python -m json.tool / jq ==
*You use python -m json.tool to indent and organize the JSON
<pre>
$ cat test.json
{"title":"Person","type":"object","properties":{"firstName":{"type":"string"},"lastName":{"type":"string"},"age":{"description":"Age in years","type":"integer","minimum":0}},"required":["firstName","lastName"]}
</pre>
*To use the Python library, pipe the output to Python with the -m (module) option.
<pre>
$ cat test.json | python -m json.tool
{
    "properties": {
        "age": {
            "description": "Age in years",
            "minimum": 0,
            "type": "integer"
        },
        "firstName": {
            "type": "string"
        },
        "lastName": {
            "type": "string"
        }
    },
    "required": [
        "firstName",
        "lastName"
    ],
    "title": "Person",
    "type": "object"
}
</pre>

*For more advanced JSON parsing, you can install jq. jq provides some options that extract specific values from the JSON input. To pretty-print like the Python module above, simply apply jq to the output.
<pre>
$ cat test.json | jq
{
  "title": "Person",
  "type": "object",
  "properties": {
    "firstName": {
      "type": "string"
    },
    "lastName": {
      "type": "string"
    },
    "age": {
      "description": "Age in years",
      "type": "integer",
      "minimum": 0
    }
  },
  "required": [
    "firstName",
    "lastName"
  ]
}
</pre>

= lsof =
*lsof lists the open files associated with your application
<pre>
lsof -i tcp:80
</pre>

= dig / nslookup =
*A domain name server (DNS) helps resolve a URL to a set of application servers. However, you may find that a URL does not resolve, which causes a connectivity issue for your application.
<pre>
$ nslookup mydatabase
Server:   10.0.2.3
Address:  10.0.2.3#53

** server can't find mydatabase: NXDOMAIN
</pre>
*Using nslookup shows that mydatabase can't be resolved. Trying to resolve with dig yields the same result.
<pre>
$ dig mydatabase

; <<>> DiG 9.9.4-RedHat-9.9.4-50.el7_3.1 <<>> mydatabase
;; global options: +cmd
;; connection timed out; no servers could be reached
</pre>

= firewall-cmd =
<pre>
$ sudo firewall-cmd --get-active-zones``
corp
  interfaces: ens0
dmz
  interfaces: ens1
</pre>
*To see what each zone permits, you can use the --list-all option:
<pre>
$ sudo firewall-cmd --zone corp --list-all
corp
  target: default
  interfaces: ens0
  services: cockpit dhcpv6-client ssh
  ports:
  protocols:
[...]
</pre>
*Adding services is just as easy:
<pre>
$ sudo firewall-cmd --add-service http --permanent
$ sudo firewall-cmd --reload
</pre>

= sestatus =
<pre>
$ sestatus
</pre>

== symbolic link ==
<pre>
ln -s /etc/openvpn/lunchVPN.sh lunchVPN
</pre>